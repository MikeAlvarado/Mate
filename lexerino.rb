#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "lex.rex".
#++

require 'racc/parser'
require_relative 'parserino'

class Mate < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/[ \t\n]/))
        ;

      when (text = @ss.scan(/[a-zA-Z][a-zA-Z0-9]*/))
         action { $line_number = lineno;
                          if text == "programa" then return     [:PROGRAM,  text]
                          elsif text == "funcion" then return   [:FUNCTION, text]
                          elsif text == "origen" then return    [:ORIGIN,   text]
                          elsif text == "var" then return       [:VAR,      text]
                          elsif text == "si" then return        [:IF,       text]
                          elsif text == "si no" then return     [:ELSE,     text]
                          elsif text == "regresa" then return   [:RETURN,   text]
                          elsif text == "mientras" then return  [:WHILE,    text]
                          elsif text == "lee" then return       [:READ,     text]
                          elsif text == "escribe" then return   [:WRITE,    text]
                          elsif text == "concatena" then return [:CONCAT,   text]
                          elsif text == "cierto" then return    [:TRUE,     text]
                          elsif text == "falso" then return     [:FALSE,    text]
                          else return [:ID, text] end }


      when (text = @ss.scan(/[0-9]+\.[0-9]+/))
         action { [:CST_DECIMAL,       text.to_f] }

      when (text = @ss.scan(/[0-9]+/))
         action { [:CST_INTEGER,       text.to_i] }

      when (text = @ss.scan(/".*"/))
         action { [:CST_STRING,        text] }

      when (text = @ss.scan(/=/))
         action { [:OP_ASSIGN,         text] }

      when (text = @ss.scan(/!=/))
         action { [:OP_NOT_EQUAL,      text] }

      when (text = @ss.scan(/==/))
         action { [:OP_EQUAL,          text] }

      when (text = @ss.scan(/\</))
         action { [:OP_LESS,           text] }

      when (text = @ss.scan(/\>/))
         action { [:OP_GREATER,        text] }

      when (text = @ss.scan(/\<=/))
         action { [:OP_LESS_EQUAL,     text] }

      when (text = @ss.scan(/\>=/))
         action { [:OP_GREATER_EQUAL,  text] }

      when (text = @ss.scan(/\|\|/))
         action { [:OP_OR,             text] }

      when (text = @ss.scan(/&&/))
         action { [:OP_AND,            text] }

      when (text = @ss.scan(/!/))
         action { [:OP_NOT,            text] }

      when (text = @ss.scan(/%/))
         action { [:OP_MOD,            text] }

      when (text = @ss.scan(/\*/))
         action { [:OP_MULTIPLY,       text] }

      when (text = @ss.scan(/\//))
         action { [:OP_DIVIDE,         text] }

      when (text = @ss.scan(/\+/))
         action { [:OP_ADD,            text] }

      when (text = @ss.scan(/\-/))
         action { [:OP_SUBTRACT,       text] }

      when (text = @ss.scan(/\(/))
         action { [:LEFT_PARENTHESIS,  text] }

      when (text = @ss.scan(/\)/))
         action { [:RIGHT_PARENTHESIS, text] }

      when (text = @ss.scan(/\{/))
         action { [:LEFT_BRACKET,      text] }

      when (text = @ss.scan(/\}/))
         action { [:RIGHT_BRACKET,     text] }

      when (text = @ss.scan(/\[/))
         action { [:LEFT_SQ_BRACKET,   text] }

      when (text = @ss.scan(/\]/))
         action { [:RIGHT_SQ_BRACKET,  text] }

      when (text = @ss.scan(/;/))
         action { [:SEMICOLON,         text] }

      when (text = @ss.scan(/,/))
         action { [:COMMA,             text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  def tokenize(code)
    scan_setup(code)
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
end # class
